// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// User defines model for user.
type User struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// UserRequest defines model for user_request.
type UserRequest struct {
	Name *string `json:"name,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// ModifyUserByIdJSONBody defines parameters for ModifyUserById.
type ModifyUserByIdJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ModifyUserByIdJSONRequestBody defines body for ModifyUserById for application/json ContentType.
type ModifyUserByIdJSONRequestBody ModifyUserByIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get All user
	// (GET /user)
	GetUser(c *fiber.Ctx) error
	// Create new user
	// (POST /user)
	CreateUser(c *fiber.Ctx) error
	// Delete user by ID
	// (DELETE /user/{id})
	DeleteUserById(c *fiber.Ctx, id string) error
	// Get user by ID
	// (GET /user/{id})
	GetUserById(c *fiber.Ctx, id string) error
	// Modify user
	// (PUT /user/{id})
	ModifyUserById(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	return siw.Handler.GetUser(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	return siw.Handler.CreateUser(c)
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteUserById(c, id)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetUserById(c, id)
}

// ModifyUserById operation middleware
func (siw *ServerInterfaceWrapper) ModifyUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.ModifyUserById(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/user", wrapper.GetUser)

	router.Post(options.BaseURL+"/user", wrapper.CreateUser)

	router.Delete(options.BaseURL+"/user/:id", wrapper.DeleteUserById)

	router.Get(options.BaseURL+"/user/:id", wrapper.GetUserById)

	router.Put(options.BaseURL+"/user/:id", wrapper.ModifyUserById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUX2/TMBD/KtbBY9q023jJ28YE6gNjYuMJTci1r6lHYpuzwxZV+e7IdtquSwcqm8Te",
	"mqvt393vz61AmNoajdo7KFZA+LNB58+MVBgLjUP63lfDtzDao44/ubWVEtwro/NbZ3So4T2vbYXhp+Y1",
	"QgEXePfVIV2Ery4DJ5ZY8/C/JWORfI+TTq/Atzbccp6ULqHrsnXFzG9ReOhCSaITpGxAhgK+pO5YgGFz",
	"I1vI4hyKUELhqcFuA7yZadiBknvws8MaU3phwuHdBq+XyjHlWGkqrktmyYQbbGGIWeLCK4GscUqXzFjU",
	"I24V41oyw60aCSOxRA0ZeOUDsXB1x8sSiV2id94QshH7bFGfXs7Y8XgCGfxCcgl4Op6Mp0eQwf2oNCPL",
	"xQ9ehidK5ZfNfCxMnT8EyanRXiWdQifcKijgeDwdTyEDy/0yEpWv+Ssx+iCQGF0wk1DAR/RBiKiBs0a7",
	"xO7RZHKIfb4lPSAA90Y6pRq6rK8fbevXiBq6m4fWUh7riPqWcAEFvMm3Ls97I6QptjJyIt7ut5dvSLPT",
	"qmLhCrtqhEDnFk1VtdEHrqlrTm2afXMuPG2N28PQe0LucUPSOnDtUw3vZDLfCWT3PJZ7Mt9tyXwyrX9n",
	"cshcDKSI00rmnqYtEcI03vXMdVkyWb5Sskt5qtDjkMrzWA84Z+1MRpMSr9EjueihPf3MziHkFIpo6O3k",
	"Sg7WxsP5H8f/Zj/zu4CpPZk2065vMjiZnAxvxJMXxrMPptHyEU/pueTCeRsm6bI/hvCVkHKgHQeZf6YN",
	"+wC/kAgh47sK2GaPAp+MVIv2v4nwqpZK4uJFtIxE1eE9Ndgp/6Jmam29drrudwAAAP//JmH/mhAJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
